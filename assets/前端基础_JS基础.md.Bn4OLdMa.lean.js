import{_ as t,D as p,c as h,j as i,a as s,I as n,w as l,a3 as e,o as k,aB as r,aC as d,aD as E}from"./chunks/framework.CidE0f6R.js";const is=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端基础/JS基础.md","filePath":"前端基础/JS基础.md","lastUpdated":1703606567000}'),g={name:"前端基础/JS基础.md"},c=e("",11),o=e("",3),y=i("p",null,"外部 JavaScript 会使代码更加有序，更易于复用，且没有了脚本的混合，HTML 也会更加易读",-1),b=e("",6),u=e("",29),F=i("li",null,[i("p",null,"不能用关键字")],-1),m=i("li",null,[i("p",null,"关键字：有特殊含义的字符，JavaScript 内置的一些英文词汇。例如：let、var、if、for 等")],-1),A=i("li",null,[i("p",null,"只能用下划线、字母、数字、$ 组成，且数字不能开头")],-1),D=e("",8),C=i("li",null,"const",-1),_=i("li",null,"定义：也是一个容器，用于保存数据的",-1),v=i("li",null,"使用场景：当某个值永远不会改变的时候，我们可以使用常量来保存，目的为了程序的安全",-1),B=e("",45),x=i("li",null,"> ：左边是否大于右边",-1),f=i("li",null,"< ：左边是否小于右边",-1),q=i("li",null,">= ：左边是否大于或等于右边",-1),j=i("li",null,"<= ：左边是否小于或等于右边",-1),P=i("li",null,"== ：左右两边值是否相等",-1),w=i("li",null,"!= ：左右值不相等",-1),T=e("",9),S=i("li",null,[s("Number() "),i("ul",null,[i("li",null,"成功，返回一个数字类型"),i("li",null,"无法转换混合字符串，会返回 NaN")])],-1),I=i("li",null,"开头是数字，会自动舍弃数字后的字符串",-1),N=i("li",null,"必须保证开头是数字，否则返回 NaN",-1),M=i("li",null,"注意事项同 parseInt()",-1),V=e("",14),J=e("",75),R=i("p",null,"②：里层循环是每一轮的比较来查找最小值",-1),H=e("",13),L=i("strong",null,"形参：",-1),$=i("strong",null,"实参：",-1),z=e("",12),U=e("",67),O=e("",13);function W(K,G,Q,X,Y,Z){const a=p("font");return k(),h("div",null,[c,i("blockquote",null,[i("p",null,[s("⚠️ 注：将 script 标签放在 "),n(a,{color:"red"},{default:l(()=>[s("HTML 文件的底部")]),_:1}),s("附近的原因：浏览器会按照代码在文件中的"),n(a,{color:"red"},{default:l(()=>[s("顺序加载")]),_:1}),s(" HTML。")])]),o,i("blockquote",null,[i("p",null,[s("⚠️ 注：script 标签中间"),n(a,{color:"red"},{default:l(()=>[s("无需写代码")]),_:1}),s("，否则会被忽略！")]),y]),b,i("p",null,[s("交互："),n(a,{color:"red"},{default:l(()=>[s("用户输入数据")]),_:1}),s(" → 数据处理 → "),n(a,{color:"red"},{default:l(()=>[s("输出结果")]),_:1}),s("展示给用户")]),u,i("ul",null,[F,m,A,i("li",null,[i("p",null,[s("字母严格"),n(a,{color:"red"},{default:l(()=>[s("区分大小写")]),_:1}),s("，如 Age 和 age 是不同的变量")])])]),D,i("ul",null,[C,_,i("li",null,[s("和变量的区别：常量里面保存的值是"),n(a,{color:"red"},{default:l(()=>[s("不允许")]),_:1}),s("改变的")]),v]),B,i("ul",null,[x,f,q,j,i("li",null,[n(a,{color:"red"},{default:l(()=>[s("=== ：左右两边是否类型和值都相等")]),_:1})]),P,w,i("li",null,[n(a,{color:"red"},{default:l(()=>[s("!== ：左右两边是否不全等")]),_:1})])]),T,i("ul",null,[S,i("li",null,[s("parseInt() "),i("ul",null,[i("li",null,[s("只保留"),n(a,{color:"red"},{default:l(()=>[s("整数")]),_:1})]),I,N])]),i("li",null,[s("parseFloat() "),i("ul",null,[i("li",null,[s("可以保留"),n(a,{color:"red"},{default:l(()=>[s("小数")]),_:1})]),M])])]),V,i("p",null,[s("表达式：可以"),n(a,{color:"red"},{default:l(()=>[s("被求值")]),_:1}),s("的代码，并将其计算出一个结果")]),i("p",null,[s("语句：一段"),n(a,{color:"red"},{default:l(()=>[s("可以执行")]),_:1}),s("的代码，是一个"),n(a,{color:"red"},{default:l(()=>[s("行为")]),_:1}),s("，例如分支语句和循环语句")]),J,i("p",null,[s("①：外层循环是一共进行几轮相比较，通过观察，一共进行"),n(a,{color:"red"},{default:l(()=>[s("数组长度-1")]),_:1}),s(" 次比较")]),i("ul",null,[i("li",null,[s("for (let i = 0; i < "),n(a,{color:"red"},{default:l(()=>[s("arr.length - 1")]),_:1}),s("; i++)")]),i("li",null,[s("把 i 作为最小值起始索引 "),n(a,{color:"red"},{default:l(()=>[s("minIndex ")]),_:1})])]),R,i("ul",null,[i("li",null,[s("里层循环起始值是 "),n(a,{color:"red"},{default:l(()=>[s("i + 1")]),_:1}),s(" 个元素开始查找")]),i("li",null,[s("for (let j = "),n(a,{color:"red"},{default:l(()=>[s("i + 1")]),_:1}),s("; j < arr.length; j++)")]),i("li",null,[s("进行比较的时候，发现最小的数组元素，把当前元素"),n(a,{color:"red"},{default:l(()=>[s("索引号给 minIndex")]),_:1})])]),i("p",null,[s("③：如果 "),n(a,{color:"red"},{default:l(()=>[s("minIndex 和 i 位置不一致")]),_:1}),s("，则交换变量")]),H,i("p",null,[L,n(a,{color:"red"},{default:l(()=>[s("声明函数")]),_:1}),s("时小括号里的叫形参（形式上的参数）")]),i("p",null,[$,n(a,{color:"red"},{default:l(()=>[s("调用函数")]),_:1}),s("时小括号里的叫实参（实际上的参数）")]),z,i("ul",null,[i("li",null,[s("默认参数主要处理"),n(a,{color:"red"},{default:l(()=>[s("函数形参")]),_:1}),s("（处理参数要比逻辑中断更简单）")]),i("li",null,[s("逻辑中断"),n(a,{color:"red"},{default:l(()=>[s("除了参数")]),_:1}),s("还可以处理更多的需求")])]),U,i("p",null,[s("Math.random()：随机数，返回一个 0 - 1 之间，并且包括 0 不包括 1 的随机小数 "),n(a,{color:"red"},{default:l(()=>[s("[0, 1）")]),_:1})]),O])}const as=t(g,[["render",W]]);export{is as __pageData,as as default};
