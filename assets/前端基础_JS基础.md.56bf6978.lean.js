import{_ as o,o as t,c as r,x as n,a as s,C as l,z as p,Q as e,D as c}from"./chunks/framework.d6bf9272.js";const i="/myblog/images/编程三大结构.png",y="/myblog/images/栈.png",D="/myblog/images/堆.png",ns=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端基础/JS基础.md","lastUpdated":1703606567000}'),F={name:"前端基础/JS基础.md"},C=e("",11),A=e("",3),d=n("p",null,"外部 JavaScript 会使代码更加有序，更易于复用，且没有了脚本的混合，HTML 也会更加易读",-1),b=e("",6),u=e("",29),m=n("li",null,[n("p",null,"不能用关键字")],-1),h=n("li",null,[n("p",null,"关键字：有特殊含义的字符，JavaScript 内置的一些英文词汇。例如：let、var、if、for 等")],-1),g=n("li",null,[n("p",null,"只能用下划线、字母、数字、$ 组成，且数字不能开头")],-1),f=e("",8),_=n("li",null,"const",-1),E=n("li",null,"定义：也是一个容器，用于保存数据的",-1),x=n("li",null,"使用场景：当某个值永远不会改变的时候，我们可以使用常量来保存，目的为了程序的安全",-1),q=e("",45),v=n("li",null,"> ：左边是否大于右边",-1),k=n("li",null,"< ：左边是否小于右边",-1),j=n("li",null,">= ：左边是否大于或等于右边",-1),P=n("li",null,"<= ：左边是否小于或等于右边",-1),w=n("li",null,"== ：左右两边值是否相等",-1),T=n("li",null,"!= ：左右值不相等",-1),S=e("",9),N=n("li",null,[s("Number() "),n("ul",null,[n("li",null,"成功，返回一个数字类型"),n("li",null,"无法转换混合字符串，会返回 NaN")])],-1),I=n("li",null,"开头是数字，会自动舍弃数字后的字符串",-1),M=n("li",null,"必须保证开头是数字，否则返回 NaN",-1),V=n("li",null,"注意事项同 parseInt()",-1),J=e("",14),R=e("",75),B=n("p",null,"②：里层循环是每一轮的比较来查找最小值",-1),H=e("",13),L=n("strong",null,"形参：",-1),$=n("strong",null,"实参：",-1),z=e("",12),U=e("",67),O=e("",13);function W(K,G,Q,X,Y,Z){const a=c("font");return t(),r("div",null,[C,n("blockquote",null,[n("p",null,[s("⚠️ 注：将 script 标签放在 "),l(a,{color:"red"},{default:p(()=>[s("HTML 文件的底部")]),_:1}),s("附近的原因：浏览器会按照代码在文件中的"),l(a,{color:"red"},{default:p(()=>[s("顺序加载")]),_:1}),s(" HTML。")])]),A,n("blockquote",null,[n("p",null,[s("⚠️ 注：script 标签中间"),l(a,{color:"red"},{default:p(()=>[s("无需写代码")]),_:1}),s("，否则会被忽略！")]),d]),b,n("p",null,[s("交互："),l(a,{color:"red"},{default:p(()=>[s("用户输入数据")]),_:1}),s(" → 数据处理 → "),l(a,{color:"red"},{default:p(()=>[s("输出结果")]),_:1}),s("展示给用户")]),u,n("ul",null,[m,h,g,n("li",null,[n("p",null,[s("字母严格"),l(a,{color:"red"},{default:p(()=>[s("区分大小写")]),_:1}),s("，如 Age 和 age 是不同的变量")])])]),f,n("ul",null,[_,E,n("li",null,[s("和变量的区别：常量里面保存的值是"),l(a,{color:"red"},{default:p(()=>[s("不允许")]),_:1}),s("改变的")]),x]),q,n("ul",null,[v,k,j,P,n("li",null,[l(a,{color:"red"},{default:p(()=>[s("=== ：左右两边是否类型和值都相等")]),_:1})]),w,T,n("li",null,[l(a,{color:"red"},{default:p(()=>[s("!== ：左右两边是否不全等")]),_:1})])]),S,n("ul",null,[N,n("li",null,[s("parseInt() "),n("ul",null,[n("li",null,[s("只保留"),l(a,{color:"red"},{default:p(()=>[s("整数")]),_:1})]),I,M])]),n("li",null,[s("parseFloat() "),n("ul",null,[n("li",null,[s("可以保留"),l(a,{color:"red"},{default:p(()=>[s("小数")]),_:1})]),V])])]),J,n("p",null,[s("表达式：可以"),l(a,{color:"red"},{default:p(()=>[s("被求值")]),_:1}),s("的代码，并将其计算出一个结果")]),n("p",null,[s("语句：一段"),l(a,{color:"red"},{default:p(()=>[s("可以执行")]),_:1}),s("的代码，是一个"),l(a,{color:"red"},{default:p(()=>[s("行为")]),_:1}),s("，例如分支语句和循环语句")]),R,n("p",null,[s("①：外层循环是一共进行几轮相比较，通过观察，一共进行"),l(a,{color:"red"},{default:p(()=>[s("数组长度-1")]),_:1}),s(" 次比较")]),n("ul",null,[n("li",null,[s("for (let i = 0; i < "),l(a,{color:"red"},{default:p(()=>[s("arr.length - 1")]),_:1}),s("; i++)")]),n("li",null,[s("把 i 作为最小值起始索引 "),l(a,{color:"red"},{default:p(()=>[s("minIndex ")]),_:1})])]),B,n("ul",null,[n("li",null,[s("里层循环起始值是 "),l(a,{color:"red"},{default:p(()=>[s("i + 1")]),_:1}),s(" 个元素开始查找")]),n("li",null,[s("for (let j = "),l(a,{color:"red"},{default:p(()=>[s("i + 1")]),_:1}),s("; j < arr.length; j++)")]),n("li",null,[s("进行比较的时候，发现最小的数组元素，把当前元素"),l(a,{color:"red"},{default:p(()=>[s("索引号给 minIndex")]),_:1})])]),n("p",null,[s("③：如果 "),l(a,{color:"red"},{default:p(()=>[s("minIndex 和 i 位置不一致")]),_:1}),s("，则交换变量")]),H,n("p",null,[L,l(a,{color:"red"},{default:p(()=>[s("声明函数")]),_:1}),s("时小括号里的叫形参（形式上的参数）")]),n("p",null,[$,l(a,{color:"red"},{default:p(()=>[s("调用函数")]),_:1}),s("时小括号里的叫实参（实际上的参数）")]),z,n("ul",null,[n("li",null,[s("默认参数主要处理"),l(a,{color:"red"},{default:p(()=>[s("函数形参")]),_:1}),s("（处理参数要比逻辑中断更简单）")]),n("li",null,[s("逻辑中断"),l(a,{color:"red"},{default:p(()=>[s("除了参数")]),_:1}),s("还可以处理更多的需求")])]),U,n("p",null,[s("Math.random()：随机数，返回一个 0 - 1 之间，并且包括 0 不包括 1 的随机小数 "),l(a,{color:"red"},{default:p(()=>[s("[0, 1）")]),_:1})]),O])}const as=o(F,[["render",W]]);export{ns as __pageData,as as default};
