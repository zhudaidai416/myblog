import{_ as a,o as s,c as n,Q as e}from"./chunks/framework.d6bf9272.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端基础/JS基础.md","lastUpdated":1679930368000}'),l={name:"前端基础/JS基础.md"},t=e(`<h2 id="核心语法基础" tabindex="-1">核心语法基础 <a class="header-anchor" href="#核心语法基础" aria-label="Permalink to &quot;核心语法基础&quot;">​</a></h2><h3 id="_1、javascript的定义" tabindex="-1">1、JavaScript的定义 <a class="header-anchor" href="#_1、javascript的定义" aria-label="Permalink to &quot;1、JavaScript的定义&quot;">​</a></h3><p>一种直译式脚本语言，一种动态类型、弱类型、基于原型的语言</p><h4 id="_1-、组成部分" tabindex="-1">1）、组成部分 <a class="header-anchor" href="#_1-、组成部分" aria-label="Permalink to &quot;1）、组成部分&quot;">​</a></h4><ul><li>核心（ECMAScript）：描述该语言的语法和基本对象</li><li>文档对象模型（DOM）：描述处理网页内容的方法和接口</li><li>浏览器对象模型（BOM）：描述与浏览器进行交互的方法和接口</li></ul><h4 id="_2-、两种类型注释" tabindex="-1">2）、两种类型注释 <a class="header-anchor" href="#_2-、两种类型注释" aria-label="Permalink to &quot;2）、两种类型注释&quot;">​</a></h4><ul><li>单行注释：//</li><li>多行注释：/* */</li></ul><h3 id="_2、javascript添加的方法" tabindex="-1">2、JavaScript添加的方法 <a class="header-anchor" href="#_2、javascript添加的方法" aria-label="Permalink to &quot;2、JavaScript添加的方法&quot;">​</a></h3><p>1、在HTML中嵌入JavaScript脚本（内嵌式）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    JavaScript代码</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>2、在HTML中链接一个外部的JavaScript文件</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">JavaScript文件名.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3、直接编写在元素的事件属性中（所有on开头的属性名）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Press Me</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onclick</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">alert(&#39;Hello World&#39;);</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>4、伪URL方法（在a标签href属性写入js代码）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">javascript:alert(&#39;Hello World&#39;);</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="变量输入输出" tabindex="-1">变量输入输出 <a class="header-anchor" href="#变量输入输出" aria-label="Permalink to &quot;变量输入输出&quot;">​</a></h2><h3 id="_1、输入" tabindex="-1">1、输入 <a class="header-anchor" href="#_1、输入" aria-label="Permalink to &quot;1、输入&quot;">​</a></h3><ul><li>prompt()</li></ul><h3 id="_2、输出" tabindex="-1">2、输出 <a class="header-anchor" href="#_2、输出" aria-label="Permalink to &quot;2、输出&quot;">​</a></h3><ul><li>控制台输出：console.log()</li><li>页面输出：document.write()</li><li>弹出框输出（警告）：alert()</li><li>innerHTML 写入 HTML 元素</li></ul><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><h3 id="_1、声明变量" tabindex="-1">1、声明变量 <a class="header-anchor" href="#_1、声明变量" aria-label="Permalink to &quot;1、声明变量&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">关键字var	变量名字</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2、变量赋值" tabindex="-1">2、变量赋值 <a class="header-anchor" href="#_2、变量赋值" aria-label="Permalink to &quot;2、变量赋值&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">变量名 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 值</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>简写：一边声明变量，一边赋值</p><p>当对某个值进行操作时，使用变量</p><h3 id="_3、命名变量" tabindex="-1">3、命名变量 <a class="header-anchor" href="#_3、命名变量" aria-label="Permalink to &quot;3、命名变量&quot;">​</a></h3><p>规范：</p><ul><li><p>第一个字符必须是字母、下划线（_）或美元符号（$）</p></li><li><p>余下的字符可以是下划线、美元符号或任何字母或数字字符</p></li></ul><p>驼峰命名法：变量名字的第一个字母是大写，后面的字母是小写</p><p>关键字、保留字、true、false、null并不能作为标识符</p><ul><li>常见关键字</li></ul><table><thead><tr><th style="text-align:center;">break</th><th style="text-align:center;">else</th><th style="text-align:center;">new</th><th style="text-align:center;">var</th></tr></thead><tbody><tr><td style="text-align:center;">case</td><td style="text-align:center;">finally</td><td style="text-align:center;">return</td><td style="text-align:center;">void</td></tr><tr><td style="text-align:center;">catch</td><td style="text-align:center;">for</td><td style="text-align:center;">switch</td><td style="text-align:center;">while</td></tr><tr><td style="text-align:center;">continue</td><td style="text-align:center;">function</td><td style="text-align:center;">this</td><td style="text-align:center;">with</td></tr><tr><td style="text-align:center;">default</td><td style="text-align:center;">if</td><td style="text-align:center;">throw</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">delete</td><td style="text-align:center;">in</td><td style="text-align:center;">try</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">do</td><td style="text-align:center;">instanceof</td><td style="text-align:center;">typeof</td><td style="text-align:center;"></td></tr></tbody></table><ul><li>常见保留字</li></ul><table><thead><tr><th style="text-align:center;">abstract</th><th style="text-align:center;">enum</th><th style="text-align:center;">int</th><th style="text-align:center;">short</th></tr></thead><tbody><tr><td style="text-align:center;">boolean</td><td style="text-align:center;">export</td><td style="text-align:center;">interface</td><td style="text-align:center;">static</td></tr><tr><td style="text-align:center;">byte</td><td style="text-align:center;">extends</td><td style="text-align:center;">long</td><td style="text-align:center;">super</td></tr><tr><td style="text-align:center;">char</td><td style="text-align:center;">final</td><td style="text-align:center;">native</td><td style="text-align:center;">synchronized</td></tr><tr><td style="text-align:center;">class</td><td style="text-align:center;">float</td><td style="text-align:center;">package</td><td style="text-align:center;">throws</td></tr><tr><td style="text-align:center;">const</td><td style="text-align:center;">goto</td><td style="text-align:center;">private</td><td style="text-align:center;">transient</td></tr><tr><td style="text-align:center;">debugger</td><td style="text-align:center;">implements</td><td style="text-align:center;">protected</td><td style="text-align:center;">volatile</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">import</td><td style="text-align:center;">public</td><td style="text-align:center;"></td></tr></tbody></table><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="_1、基本数据类型" tabindex="-1">1、基本数据类型 <a class="header-anchor" href="#_1、基本数据类型" aria-label="Permalink to &quot;1、基本数据类型&quot;">​</a></h3><p>string字符串、number数值、boolean布尔、undefined、null</p><h3 id="_2、引用数据类型" tabindex="-1">2、引用数据类型 <a class="header-anchor" href="#_2、引用数据类型" aria-label="Permalink to &quot;2、引用数据类型&quot;">​</a></h3><p>object对象、array数组、function函数</p><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><h3 id="_1、操作符-typeof" tabindex="-1">1、操作符：typeof <a class="header-anchor" href="#_1、操作符-typeof" aria-label="Permalink to &quot;1、操作符：typeof&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// object</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2、算数运算符" tabindex="-1">2、算数运算符：+ - * / % <a class="header-anchor" href="#_2、算数运算符" aria-label="Permalink to &quot;2、算数运算符：\\+    -    *    /    %&quot;">​</a></h3><h3 id="_3、比较-关系-运算符" tabindex="-1">3、比较（关系）运算符：&gt; &lt; &gt;= &lt;= == != === !== <a class="header-anchor" href="#_3、比较-关系-运算符" aria-label="Permalink to &quot;3、比较（关系）运算符：\\&gt;    &lt;    &gt;=    &lt;=    ==    !=    ===    !==&quot;">​</a></h3><p>返回的一定是布尔值</p><table><thead><tr><th style="text-align:center;">表达式</th><th style="text-align:center;">值</th></tr></thead><tbody><tr><td style="text-align:center;">null == undefined</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">‘NaN’ == NaN</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">5 == NaN</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">NaN == NaN</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">false == 0</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">true == 1</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">true == 2</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">undefined == 0</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">null == 0</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">‘100’ == 100</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">‘100’ === 100</td><td style="text-align:center;">false</td></tr></tbody></table><h3 id="_4、逻辑运算符-并且-或者-取反" tabindex="-1">4、逻辑运算符：&amp;&amp;并且 ||或者 !取反 <a class="header-anchor" href="#_4、逻辑运算符-并且-或者-取反" aria-label="Permalink to &quot;4、逻辑运算符：&amp;&amp;并且  ||或者  !取反&quot;">​</a></h3><h3 id="_5、一元运算" tabindex="-1">5、一元运算：++ -- <a class="header-anchor" href="#_5、一元运算" aria-label="Permalink to &quot;5、一元运算：++  --&quot;">​</a></h3><ul><li>如使用前置（Prefix）自增，操作符在操作数前（例如 ++x）， 操作数会加一，然后返回加一之后的值。</li><li>后置自增（例如 x++），操作数会加一 3，然后返回加一之前的值</li></ul><h3 id="_6、二元运算" tabindex="-1">6、二元运算 <a class="header-anchor" href="#_6、二元运算" aria-label="Permalink to &quot;6、二元运算&quot;">​</a></h3><h3 id="_7、三元运算-条件表达式-表达式1-表达式2" tabindex="-1">7、三元运算：条件表达式 ? 表达式1 : 表达式2 <a class="header-anchor" href="#_7、三元运算-条件表达式-表达式1-表达式2" aria-label="Permalink to &quot;7、三元运算：条件表达式 ? 表达式1 : 表达式2&quot;">​</a></h3><blockquote><p>当结果为true时，执行表达式1，否则执行表达式2</p></blockquote><h3 id="_8、赋值运算符" tabindex="-1">8、赋值运算符：= += -= *= /= <a class="header-anchor" href="#_8、赋值运算符" aria-label="Permalink to &quot;8、赋值运算符：=  +=  -=  *=  /=&quot;">​</a></h3><h2 id="数据类型之间的转换" tabindex="-1">数据类型之间的转换 <a class="header-anchor" href="#数据类型之间的转换" aria-label="Permalink to &quot;数据类型之间的转换&quot;">​</a></h2><h3 id="_1、转数字" tabindex="-1">1、转数字 <a class="header-anchor" href="#_1、转数字" aria-label="Permalink to &quot;1、转数字&quot;">​</a></h3><ul><li>parseInt()：将值转成整数数字</li><li>parseFloat()：将值转成小数点数字</li><li>Number()</li></ul><h3 id="_2、转字符串" tabindex="-1">2、转字符串 <a class="header-anchor" href="#_2、转字符串" aria-label="Permalink to &quot;2、转字符串&quot;">​</a></h3><ul><li>String()</li></ul><h3 id="_3、转布尔值" tabindex="-1">3、转布尔值 <a class="header-anchor" href="#_3、转布尔值" aria-label="Permalink to &quot;3、转布尔值&quot;">​</a></h3><p>Boolean()</p><h2 id="转义符" tabindex="-1">转义符 <a class="header-anchor" href="#转义符" aria-label="Permalink to &quot;转义符&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">字面量</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">\\n</td><td style="text-align:center;">换行</td></tr><tr><td style="text-align:center;">\\t</td><td style="text-align:center;">制表</td></tr><tr><td style="text-align:center;">\\b</td><td style="text-align:center;">空格</td></tr><tr><td style="text-align:center;">\\r</td><td style="text-align:center;">回车</td></tr><tr><td style="text-align:center;">\\f</td><td style="text-align:center;">进纸</td></tr><tr><td style="text-align:center;">\\ \\</td><td style="text-align:center;">斜杠</td></tr><tr><td style="text-align:center;">\\ &#39;</td><td style="text-align:center;">单引号</td></tr><tr><td style="text-align:center;">\\ &#39;&#39;</td><td style="text-align:center;">双引号</td></tr></tbody></table><h2 id="编程三大结构" tabindex="-1">编程三大结构 <a class="header-anchor" href="#编程三大结构" aria-label="Permalink to &quot;编程三大结构&quot;">​</a></h2><p>顺序结构：语句的顺序执行</p><p>分支结构：有些代码执行有些代码不执行，会有条件约束</p><p>循环结构：重复执行一个或几个模块，直到满足某个条件为止</p><h3 id="_1、分支结构" tabindex="-1">1、分支结构 <a class="header-anchor" href="#_1、分支结构" aria-label="Permalink to &quot;1、分支结构&quot;">​</a></h3><h4 id="_1-、单分支" tabindex="-1">1）、单分支 <a class="header-anchor" href="#_1-、单分支" aria-label="Permalink to &quot;1）、单分支&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(条件表达式)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-、双分支" tabindex="-1">2）、双分支 <a class="header-anchor" href="#_2-、双分支" aria-label="Permalink to &quot;2）、双分支&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(条件表达式)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_3-、多分支" tabindex="-1">3）、多分支 <a class="header-anchor" href="#_3-、多分支" aria-label="Permalink to &quot;3）、多分支&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(条件表达式)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(条件表达式)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>注意：</p><ul><li><p>switch里面的case判断等同于else if（）{}</p></li><li><p>case判断===要比较值和数据类型</p></li></ul><h3 id="_2、循环结构" tabindex="-1">2、循环结构 <a class="header-anchor" href="#_2、循环结构" aria-label="Permalink to &quot;2、循环结构&quot;">​</a></h3><h4 id="_1-、while循环-先验证后循环" tabindex="-1">1）、while循环（先验证后循环） <a class="header-anchor" href="#_1-、while循环-先验证后循环" aria-label="Permalink to &quot;1）、while循环（先验证后循环）&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;">(条件表达式)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">循环体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-、do-while循环-先循环后验证" tabindex="-1">2）、do-while循环（先循环后验证） <a class="header-anchor" href="#_2-、do-while循环-先循环后验证" aria-label="Permalink to &quot;2）、do-while循环（先循环后验证）&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">循环体</span><span style="color:#F07178;">（</span><span style="color:#A6ACCD;">先执行一次</span><span style="color:#F07178;">）</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;">(条件表达式)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-、for循环-先判断后循环" tabindex="-1">3）、for循环（先判断后循环） <a class="header-anchor" href="#_3-、for循环-先判断后循环" aria-label="Permalink to &quot;3）、for循环（先判断后循环）&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(表达式1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">表达式2</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">表达式3)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> 表达式1：循环变量的初始化</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> 表达式2：判断条件</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> 表达式3：循环变量的改变</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_4-、跳出循环" tabindex="-1">4）、跳出循环 <a class="header-anchor" href="#_4-、跳出循环" aria-label="Permalink to &quot;4）、跳出循环&quot;">​</a></h4><ul><li><p>break：跳出循环</p></li><li><p>continue：跳出本次循环</p></li></ul><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><h3 id="_1、数组定义" tabindex="-1">1、数组定义 <a class="header-anchor" href="#_1、数组定义" aria-label="Permalink to &quot;1、数组定义&quot;">​</a></h3><p>定义：连续的储存空间</p><p>通过下标获取数组的某个值，数组的下标从0开始</p><h3 id="_2、遍历数组" tabindex="-1">2、遍历数组 <a class="header-anchor" href="#_2、遍历数组" aria-label="Permalink to &quot;2、遍历数组&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">arr[i]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3、创建数组" tabindex="-1">3、创建数组 <a class="header-anchor" href="#_3、创建数组" aria-label="Permalink to &quot;3、创建数组&quot;">​</a></h3><h4 id="_1-、通过字面量创建" tabindex="-1">1）、通过字面量创建 <a class="header-anchor" href="#_1-、通过字面量创建" aria-label="Permalink to &quot;1）、通过字面量创建&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-、通过构造器创建" tabindex="-1">2）、通过构造器创建 <a class="header-anchor" href="#_2-、通过构造器创建" aria-label="Permalink to &quot;2）、通过构造器创建&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">)   </span><span style="color:#676E95;font-style:italic;">//创建长度为5的数组</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">朱一龙</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)   </span><span style="color:#676E95;font-style:italic;">//创建有数据的数组</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_4、引用数组" tabindex="-1">4、引用数组 <a class="header-anchor" href="#_4、引用数组" aria-label="Permalink to &quot;4、引用数组&quot;">​</a></h3><p>1、通过数组下标添加</p><p>2、通过for循环遍历</p><h3 id="_5、常用方法" tabindex="-1">5、常用方法 <a class="header-anchor" href="#_5、常用方法" aria-label="Permalink to &quot;5、常用方法&quot;">​</a></h3><p>数组的方法：增 删 改 查</p><h4 id="_1-增" tabindex="-1">1）增 <a class="header-anchor" href="#_1-增" aria-label="Permalink to &quot;1）增&quot;">​</a></h4><ul><li><p>push()：在末尾添加</p></li><li><p>unshift()：在第一个添加</p></li></ul><h4 id="_2-、删" tabindex="-1">2）、删 <a class="header-anchor" href="#_2-、删" aria-label="Permalink to &quot;2）、删&quot;">​</a></h4><ul><li><p>pop()：删除数组的最后一项</p></li><li><p>shift()：删除数组的第一项</p></li><li><p>splice(起始下标,删除几个)：删除指定项</p></li></ul><h4 id="_3-、改" tabindex="-1">3）、改 <a class="header-anchor" href="#_3-、改" aria-label="Permalink to &quot;3）、改&quot;">​</a></h4><p>插入：splice(起始下标,0,插入内容)</p><p>替换：splice(起始下标,删除数量,替换内容)</p><p>数组下标直接赋值</p><blockquote><p>修改替换 ：注意第二个参数代表删除几个，如果删除0个则代表插入</p><p>删除1个则第三个参数值会进行插入</p></blockquote><h4 id="_4-、合并-concat" tabindex="-1">4）、合并：concat <a class="header-anchor" href="#_4-、合并-concat" aria-label="Permalink to &quot;4）、合并：concat&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">234</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hahah</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#A6ACCD;">(arr2)    </span><span style="color:#676E95;font-style:italic;">//[123,&#39;234&#39;,true,false,&#39;hahah&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>注：谁调用concat的方法，谁就在前面</p><p>concat合并方法，既不会改变arr1也不会改变arr2，会生成一个新的数组</p></blockquote><h4 id="_5-、数组的抽取截取" tabindex="-1">5）、数组的抽取截取 <a class="header-anchor" href="#_5-、数组的抽取截取" aria-label="Permalink to &quot;5）、数组的抽取截取&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">(起始下标【要被截取】</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">结束下标【不会被截取】)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>注：slice方法 也会生成一个新数组，原数组不会发生改变</p></blockquote><h4 id="_6-、数组的串联-join" tabindex="-1">6）、数组的串联：join() <a class="header-anchor" href="#_6-、数组的串联-join" aria-label="Permalink to &quot;6）、数组的串联：join()&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr6 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> newArr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr6</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 把数组的每一项都获取出来并将*把他们连接变成一个字符串</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(newArr)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_7-、数组的反转-reverse" tabindex="-1">7）、数组的反转：reverse() <a class="header-anchor" href="#_7-、数组的反转-reverse" aria-label="Permalink to &quot;7）、数组的反转：reverse()&quot;">​</a></h4><blockquote><p>注：会改变原数组</p></blockquote><h4 id="_8-、清空数组" tabindex="-1">8）、清空数组 <a class="header-anchor" href="#_8-、清空数组" aria-label="Permalink to &quot;8）、清空数组&quot;">​</a></h4><ul><li>var arr=[]</li><li>arr.length = 0</li><li>arr.splice(0,arr.length)</li></ul><h2 id="math对象" tabindex="-1">Math对象 <a class="header-anchor" href="#math对象" aria-label="Permalink to &quot;Math对象&quot;">​</a></h2><p>Math对象是一个内置对象</p><h3 id="_1、随机数" tabindex="-1">1、随机数 <a class="header-anchor" href="#_1、随机数" aria-label="Permalink to &quot;1、随机数&quot;">​</a></h3><p>Math.random()</p><p>一个大数字和一个小数字组成一个范围</p><p>随机数*（大数字-小数字）+ 小数字就能得到这个范围内的数字</p><h3 id="_2、取整方法" tabindex="-1">2、取整方法 <a class="header-anchor" href="#_2、取整方法" aria-label="Permalink to &quot;2、取整方法&quot;">​</a></h3><p>Math.round()：四舍五入</p><p>Math.ceil()：向上取整</p><p>Math.floor()：向下取整</p><p>Math.pow(数值,几次方)：次方计算</p><p>Math.abs()：绝对值</p><p>Math.sqrt()：平方根</p>`,138),p=[t];function r(o,c,i,d,y,h){return s(),n("div",null,p)}const F=a(l,[["render",r]]);export{u as __pageData,F as default};
